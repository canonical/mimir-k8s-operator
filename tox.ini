# Copyright 2022 jose
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, scenario, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
#lib_path = {toxinidir}/lib/charms/mimir_k8s
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=pdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    flake8 < 5
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache \
      --skip icon.svg --skip prometheus_alert_rules --skip grafana_dashboards
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-charm]
description = Run static analysis checks
setenv =
    unit: MYPYPATH = {[vars]tst_path}/unit
    integration: MYPYPATH = {[vars]tst_path}/integration
deps =
    mypy
    types-dataclasses
    types-PyYAML
    types-requests
    charm: -r{toxinidir}/requirements.txt
    lib: ops
commands =
    charm: mypy {[vars]src_path} {posargs}


[testenv:static-lib]
description = Empty test
commands =
    ;

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report

[testenv:scenario]
description = Scenario tests
deps =
    coverage[toml]
    pytest
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/scenario
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    aiohttp
    pytest
    juju
    pytest-operator
    PyYAML
    pytimeparse
    -r{toxinidir}/requirements.txt
commands =
    pytest -vv --tb native --log-cli-level=INFO --color=yes -s {posargs} {toxinidir}/tests/integration
